!<arch>
0-isupper.c/    0           0     0     644     216       `
/**
 * _isupper - checks if given charactor is uppercase
 * @c: alphabet charactor
 * Return: returns 1 if c uppercase, 0 if not
*/

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     617       `
/**
 * _memset - a function that fills memory with a constant byte
 *
 * @s: input pointer to char type represents the pointer to the
 *			block of memory to fill
 * @b: input variable of char type represents the character to
 *			fill s
 * @n: unsigned int variable the number of bytes to be filled
 *
 * Return: A pointer to the filled memory
 *         area @s
*/

char *_memset(char *s, char b, unsigned int n)
{
	/**
	 * declare an unsigned int because we are storing a
	 * value that will always be non-negative
	 * (zero or positive)
	*/
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;

	return (s);
}


0-strcat.c/     0           0     0     644     520       `
/**
 * _strcat - function that concatenates two strings.
 *
 * @dest: pointer to destination parameter
 * @src: pointer to source parameter
 *
 * Return: pointer to resulting string destination
*/

char *_strcat(char *dest, char *src)
{
	int d, s;

	d = 0;
	/*find the size of dest array*/
	while (dest[d])
		d++;

	/* iterate through each src array value without the null byte*/
	for (s = 0; src[s] ; s++)
		/*append src[s] to dest[c] while overwriting the null byte in dest*/
		dest[d++] = src[s];

	return (dest);
}

100-atoi.c/     0           0     0     644     368       `
/**
 * _atoi - converts a string to an integer
 *
 * @s: string input parameter
 *
 * Return: converted integer from string
*/

int _atoi(char *s)
{
	unsigned int num = 0;
	int sign = 1;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}

1-isdigit.c/    0           0     0     644     214       `
/**
 * _isdigit - function to check value is a digit
 * @c: value to checked
 * Return: returns 1 for digit and 0 otherwise
 *
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     323       `
/**
 * _memcpy - function that copies memory area
 *
 * @dest: buffer where we will copy to
 * @src: what we are to copy
 * @n: n bytes of @src
 *
 * Return: destination buffer data
*/

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}


1-strncat.c/    0           0     0     644     547       `
/**
 * _strncat - a function that concatenates two strings.
 *
 * @dest: pointer to destination input
 * @src: pointer to source input
 * @n: maximum number of bytes from @src
 *
 * Return: pointer
*/

char *_strncat(char *dest, char *src, int n)
{
	int d, s;

	d = 0;

	/* find size of dest array */
	while (dest[d])
		d++;

	/**
	 * src does not need to be null terminated
	 * if it contains n or more bytes
	*/
	for (s = 0; s < n && src[s] != '\0'; s++)
		dest[d + s] = src[s];
	/*null terminate dest*/
	dest[d + s] = '\0';

	return (dest);
}


2-strchr.c/     0           0     0     644     503       `
/**
 * _strchr - a function that locates first occerance of
 *		a character in a string
 *
 * @s: pointer to a string (array of char)
 * @c: character to locate from string
 *
 * Return: first occurence of charatcer or null if not found
*/

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		s++;
	}
	/**
	 * if c is '\0', you should return the pointer to the '\0'
	 * of the string s
	*/
	if (*s == c)
		return (s);
	/*return null if not found*/
	return ('\0');
}


2-strlen.c/     0           0     0     644     231       `
/**
 * _strlen - calculates the length of the string
 *
 * @s: string parameter input
 *
 * Return: length of string
*/

int _strlen(char *s)
{
	int counter;

	for (counter = 0; *s != '\0'; ++s)
		++counter;

	return (counter);
}


2-strncpy.c/    0           0     0     644     678       `
/**
 * _strncpy - A function that copies a string.
 *
 * @dest: pointer to destination input buffer
 * @src: pointer to source input buffer
 * @n: bytes of @src
 *
 * Return: @dest
*/

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	/**
	 * iterate through src array where if there is no null byte
	 * among the first n bytes of source the string placed in dest will not be
	 * null terminated
	*/
	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];

	/**
	 * if the length of source is less than n
	 * write additional null bytes to dest to
	 * ensure that a total of n bytes is written
	*/
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}

3-islower.c/    0           0     0     644     266       `
#include"main.h"

/**
 * _islower - function to check if
 *           character is lowercase
 * @c: character whose case to determine
 *
 * Return: returns 1 if `c` is lowercase else 0
*/

int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	return (0);
}
3-puts.c/       0           0     0     644     216       `
#include "main.h"

/**
 * _puts - prints a string
 *
 * @str: pointer to string parameter
 *
 * Return: void
*/

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str + 0);
		++str;
	}
	_putchar('\n');
}

3-strspn.c/     0           0     0     644     582       `
/**
 * _strspn - a function that gets the length of a prefix substring
 *
 * @s: pointer to string
 * @accept: substring prefix to look for
 *
 * Return: the number of bytes in the initial segment
*/

unsigned int _strspn(char *s, char *accept)
{
	int idx, prefixIdx, statusFlag;

	idx = 0;
	while (s[idx] != '\0')
	{
		prefixIdx = 0;
		statusFlag = 1; /*flag status*/
		while (accept[prefixIdx] != '\0')
		{
			if (s[idx] == accept[prefixIdx])
			{
				statusFlag = 0; /*success*/
				break;
			}
			prefixIdx++;
		}
		if (statusFlag == 1)
			break;
		idx++;
	}

	return (idx);
}

4-isalpha.c/    0           0     0     644     313       `
#include"main.h"

/**
 * _isalpha - checks if character is a letter
 *            both lowercase or uppercase
 *
 * @c: function parameter for chracter.
 *
 * Return: returns 1 if c is a letter else 0
*/

int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) ||
	    (c >= 65 && c <= 90))
		return (1);
	return (0);
}

4-strpbrk.c/    0           0     0     644     520       `
/**
 * _strpbrk - a function that searches a string for any of a set of bytes.
 *
 * @s: pointer to a string
 * @accept: pointer to string we are searching for in @s
 *
 * Return: pointer to the bytes in @s
 *         or NULL if no such byte is found
*/

char *_strpbrk(char *s, char *accept)
{
	int idx, searchIdx;

	idx = 0;
	while (s[idx] != '\0')
	{
		searchIdx = 0;
		while (accept[searchIdx] != '\0')
		{
			if (s[idx] == accept[searchIdx])
				return (s + idx);
			searchIdx++;
		}
		idx++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     581       `
/**
 * _strstr - a function that locates a substring
 *
 * @haystack: string to search for matching substrings
 * @needle: substring to search for
 *
 * Return: a pointer to the beginning of the located substring or
 *         NULL if substring is not found
*/

char *_strstr(char *haystack, char *needle)
{
	/**
	 * variable tracking heystack and
	 * niddle positions
	*/
	char *h, *n;

	while (*haystack != '\0')
	{
		h = haystack;
		n = needle;
		while (*n != '\0' && *haystack == *n)
		{
			haystack++;
			n++;
		}
		if (!*n)
			return (h);
		haystack++;
	}
	return ('\0');
}


6-abs.c/        0           0     0     644     254       `
#include"main.h"

/**
 * _abs - function that computes the absolute
 *       value of an integer
 *
 * @n: integer whose absolute value is to be found
 *
 * Return: returns postive integer
*/

int _abs(int n)
{
	if (n < 0)
		n = (-1) * n;
	return (n);
}
9-strcpy.c/     0           0     0     644     391       `
/**
 * _strcpy - copies a string from one pointer to another
 *	including the terminating null byte (\0)
 *
 * @src: source of string parameter input
 * @dest: destination of string
 *
 * Return: pointer to dest input parameter
*/

char *_strcpy(char *dest, char *src)
{
	int a, b = 0;

	for (a = 0; src[a] != '\0'; ++a)
	{
		dest[b] = src[a];
		++b;
	}
	dest[b] = '\0';

	return (dest);
}


